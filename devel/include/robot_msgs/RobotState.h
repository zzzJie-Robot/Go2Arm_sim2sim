// Generated by gencpp from file robot_msgs/RobotState.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_ROBOTSTATE_H
#define ROBOT_MSGS_MESSAGE_ROBOTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_msgs/IMU.h>
#include <robot_msgs/MotorState.h>

namespace robot_msgs
{
template <class ContainerAllocator>
struct RobotState_
{
  typedef RobotState_<ContainerAllocator> Type;

  RobotState_()
    : imu()
    , motor_state()  {
    }
  RobotState_(const ContainerAllocator& _alloc)
    : imu(_alloc)
    , motor_state()  {
  (void)_alloc;
      motor_state.assign( ::robot_msgs::MotorState_<ContainerAllocator> (_alloc));
  }



   typedef  ::robot_msgs::IMU_<ContainerAllocator>  _imu_type;
  _imu_type imu;

   typedef boost::array< ::robot_msgs::MotorState_<ContainerAllocator> , 32>  _motor_state_type;
  _motor_state_type motor_state;





  typedef boost::shared_ptr< ::robot_msgs::RobotState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::RobotState_<ContainerAllocator> const> ConstPtr;

}; // struct RobotState_

typedef ::robot_msgs::RobotState_<std::allocator<void> > RobotState;

typedef boost::shared_ptr< ::robot_msgs::RobotState > RobotStatePtr;
typedef boost::shared_ptr< ::robot_msgs::RobotState const> RobotStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::RobotState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::RobotState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::RobotState_<ContainerAllocator1> & lhs, const ::robot_msgs::RobotState_<ContainerAllocator2> & rhs)
{
  return lhs.imu == rhs.imu &&
    lhs.motor_state == rhs.motor_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::RobotState_<ContainerAllocator1> & lhs, const ::robot_msgs::RobotState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::RobotState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::RobotState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::RobotState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::RobotState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::RobotState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::RobotState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7d5f0c74618348347456ca207fda81e";
  }

  static const char* value(const ::robot_msgs::RobotState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7d5f0c746183483ULL;
  static const uint64_t static_value2 = 0x47456ca207fda81eULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/RobotState";
  }

  static const char* value(const ::robot_msgs::RobotState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "IMU imu\n"
"MotorState[32] motor_state\n"
"================================================================================\n"
"MSG: robot_msgs/IMU\n"
"float32[4] quaternion\n"
"float32[3] gyroscope\n"
"float32[3] accelerometer\n"
"================================================================================\n"
"MSG: robot_msgs/MotorState\n"
"float32 q            # motor current position (rad)\n"
"float32 dq           # motor current speed (rad/s)\n"
"float32 ddq          # motor current speed (rad/s)\n"
"float32 tau_est      # current estimated output torque (N*m)\n"
"float32 cur          # current estimated output cur (N*m)\n"
;
  }

  static const char* value(const ::robot_msgs::RobotState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::RobotState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imu);
      stream.next(m.motor_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::RobotState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::RobotState_<ContainerAllocator>& v)
  {
    s << indent << "imu: ";
    s << std::endl;
    Printer< ::robot_msgs::IMU_<ContainerAllocator> >::stream(s, indent + "  ", v.imu);
    s << indent << "motor_state[]" << std::endl;
    for (size_t i = 0; i < v.motor_state.size(); ++i)
    {
      s << indent << "  motor_state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_msgs::MotorState_<ContainerAllocator> >::stream(s, indent + "    ", v.motor_state[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_ROBOTSTATE_H
