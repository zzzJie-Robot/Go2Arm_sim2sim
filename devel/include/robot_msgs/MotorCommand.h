// Generated by gencpp from file robot_msgs/MotorCommand.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_MOTORCOMMAND_H
#define ROBOT_MSGS_MESSAGE_MOTORCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct MotorCommand_
{
  typedef MotorCommand_<ContainerAllocator> Type;

  MotorCommand_()
    : q(0.0)
    , dq(0.0)
    , tau(0.0)
    , kp(0.0)
    , kd(0.0)  {
    }
  MotorCommand_(const ContainerAllocator& _alloc)
    : q(0.0)
    , dq(0.0)
    , tau(0.0)
    , kp(0.0)
    , kd(0.0)  {
  (void)_alloc;
    }



   typedef float _q_type;
  _q_type q;

   typedef float _dq_type;
  _dq_type dq;

   typedef float _tau_type;
  _tau_type tau;

   typedef float _kp_type;
  _kp_type kp;

   typedef float _kd_type;
  _kd_type kd;





  typedef boost::shared_ptr< ::robot_msgs::MotorCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::MotorCommand_<ContainerAllocator> const> ConstPtr;

}; // struct MotorCommand_

typedef ::robot_msgs::MotorCommand_<std::allocator<void> > MotorCommand;

typedef boost::shared_ptr< ::robot_msgs::MotorCommand > MotorCommandPtr;
typedef boost::shared_ptr< ::robot_msgs::MotorCommand const> MotorCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::MotorCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::MotorCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::MotorCommand_<ContainerAllocator1> & lhs, const ::robot_msgs::MotorCommand_<ContainerAllocator2> & rhs)
{
  return lhs.q == rhs.q &&
    lhs.dq == rhs.dq &&
    lhs.tau == rhs.tau &&
    lhs.kp == rhs.kp &&
    lhs.kd == rhs.kd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::MotorCommand_<ContainerAllocator1> & lhs, const ::robot_msgs::MotorCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::MotorCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::MotorCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::MotorCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::MotorCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::MotorCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::MotorCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::MotorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0de93abe63b1a227801d67b6ef4add00";
  }

  static const char* value(const ::robot_msgs::MotorCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0de93abe63b1a227ULL;
  static const uint64_t static_value2 = 0x801d67b6ef4add00ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::MotorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/MotorCommand";
  }

  static const char* value(const ::robot_msgs::MotorCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::MotorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 q            # motor target position\n"
"float32 dq           # motor target velocity\n"
"float32 tau          # motor target torque\n"
"float32 kp           # motor spring stiffness coefficient\n"
"float32 kd           # motor damper coefficient\n"
;
  }

  static const char* value(const ::robot_msgs::MotorCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::MotorCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q);
      stream.next(m.dq);
      stream.next(m.tau);
      stream.next(m.kp);
      stream.next(m.kd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::MotorCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::MotorCommand_<ContainerAllocator>& v)
  {
    s << indent << "q: ";
    Printer<float>::stream(s, indent + "  ", v.q);
    s << indent << "dq: ";
    Printer<float>::stream(s, indent + "  ", v.dq);
    s << indent << "tau: ";
    Printer<float>::stream(s, indent + "  ", v.tau);
    s << indent << "kp: ";
    Printer<float>::stream(s, indent + "  ", v.kp);
    s << indent << "kd: ";
    Printer<float>::stream(s, indent + "  ", v.kd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_MOTORCOMMAND_H
