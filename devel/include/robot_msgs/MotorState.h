// Generated by gencpp from file robot_msgs/MotorState.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_MOTORSTATE_H
#define ROBOT_MSGS_MESSAGE_MOTORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct MotorState_
{
  typedef MotorState_<ContainerAllocator> Type;

  MotorState_()
    : q(0.0)
    , dq(0.0)
    , ddq(0.0)
    , tau_est(0.0)
    , cur(0.0)  {
    }
  MotorState_(const ContainerAllocator& _alloc)
    : q(0.0)
    , dq(0.0)
    , ddq(0.0)
    , tau_est(0.0)
    , cur(0.0)  {
  (void)_alloc;
    }



   typedef float _q_type;
  _q_type q;

   typedef float _dq_type;
  _dq_type dq;

   typedef float _ddq_type;
  _ddq_type ddq;

   typedef float _tau_est_type;
  _tau_est_type tau_est;

   typedef float _cur_type;
  _cur_type cur;





  typedef boost::shared_ptr< ::robot_msgs::MotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::MotorState_<ContainerAllocator> const> ConstPtr;

}; // struct MotorState_

typedef ::robot_msgs::MotorState_<std::allocator<void> > MotorState;

typedef boost::shared_ptr< ::robot_msgs::MotorState > MotorStatePtr;
typedef boost::shared_ptr< ::robot_msgs::MotorState const> MotorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::MotorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::MotorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::MotorState_<ContainerAllocator1> & lhs, const ::robot_msgs::MotorState_<ContainerAllocator2> & rhs)
{
  return lhs.q == rhs.q &&
    lhs.dq == rhs.dq &&
    lhs.ddq == rhs.ddq &&
    lhs.tau_est == rhs.tau_est &&
    lhs.cur == rhs.cur;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::MotorState_<ContainerAllocator1> & lhs, const ::robot_msgs::MotorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::MotorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf3a599ff7d0c7528dc0b4a11694b234";
  }

  static const char* value(const ::robot_msgs::MotorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf3a599ff7d0c752ULL;
  static const uint64_t static_value2 = 0x8dc0b4a11694b234ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/MotorState";
  }

  static const char* value(const ::robot_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 q            # motor current position (rad)\n"
"float32 dq           # motor current speed (rad/s)\n"
"float32 ddq          # motor current speed (rad/s)\n"
"float32 tau_est      # current estimated output torque (N*m)\n"
"float32 cur          # current estimated output cur (N*m)\n"
;
  }

  static const char* value(const ::robot_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::MotorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q);
      stream.next(m.dq);
      stream.next(m.ddq);
      stream.next(m.tau_est);
      stream.next(m.cur);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::MotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::MotorState_<ContainerAllocator>& v)
  {
    s << indent << "q: ";
    Printer<float>::stream(s, indent + "  ", v.q);
    s << indent << "dq: ";
    Printer<float>::stream(s, indent + "  ", v.dq);
    s << indent << "ddq: ";
    Printer<float>::stream(s, indent + "  ", v.ddq);
    s << indent << "tau_est: ";
    Printer<float>::stream(s, indent + "  ", v.tau_est);
    s << indent << "cur: ";
    Printer<float>::stream(s, indent + "  ", v.cur);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_MOTORSTATE_H
