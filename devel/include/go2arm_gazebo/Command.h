// Generated by gencpp from file go2arm_gazebo/Command.msg
// DO NOT EDIT!


#ifndef GO2ARM_GAZEBO_MESSAGE_COMMAND_H
#define GO2ARM_GAZEBO_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <go2arm_gazebo/Vector3.h>
#include <go2arm_gazebo/Vector3.h>
#include <go2arm_gazebo/Orientation.h>

namespace go2arm_gazebo
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : velocity()
    , pos()
    , ori()
    , L_finger_pos(0.0)
    , R_finger_pos(0.0)  {
    }
  Command_(const ContainerAllocator& _alloc)
    : velocity(_alloc)
    , pos(_alloc)
    , ori(_alloc)
    , L_finger_pos(0.0)
    , R_finger_pos(0.0)  {
  (void)_alloc;
    }



   typedef  ::go2arm_gazebo::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::go2arm_gazebo::Vector3_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef  ::go2arm_gazebo::Orientation_<ContainerAllocator>  _ori_type;
  _ori_type ori;

   typedef double _L_finger_pos_type;
  _L_finger_pos_type L_finger_pos;

   typedef double _R_finger_pos_type;
  _R_finger_pos_type R_finger_pos;





  typedef boost::shared_ptr< ::go2arm_gazebo::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::go2arm_gazebo::Command_<ContainerAllocator> const> ConstPtr;

}; // struct Command_

typedef ::go2arm_gazebo::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::go2arm_gazebo::Command > CommandPtr;
typedef boost::shared_ptr< ::go2arm_gazebo::Command const> CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::go2arm_gazebo::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::go2arm_gazebo::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::go2arm_gazebo::Command_<ContainerAllocator1> & lhs, const ::go2arm_gazebo::Command_<ContainerAllocator2> & rhs)
{
  return lhs.velocity == rhs.velocity &&
    lhs.pos == rhs.pos &&
    lhs.ori == rhs.ori &&
    lhs.L_finger_pos == rhs.L_finger_pos &&
    lhs.R_finger_pos == rhs.R_finger_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::go2arm_gazebo::Command_<ContainerAllocator1> & lhs, const ::go2arm_gazebo::Command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace go2arm_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::go2arm_gazebo::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::go2arm_gazebo::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::go2arm_gazebo::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::go2arm_gazebo::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::go2arm_gazebo::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::go2arm_gazebo::Command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::go2arm_gazebo::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ab687a3009a5ba42ab64b770a245c5d";
  }

  static const char* value(const ::go2arm_gazebo::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ab687a3009a5ba4ULL;
  static const uint64_t static_value2 = 0x2ab64b770a245c5dULL;
};

template<class ContainerAllocator>
struct DataType< ::go2arm_gazebo::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "go2arm_gazebo/Command";
  }

  static const char* value(const ::go2arm_gazebo::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::go2arm_gazebo::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Command.msg\n"
"Vector3 velocity\n"
"Vector3 pos\n"
"Orientation ori\n"
"float64 L_finger_pos\n"
"float64 R_finger_pos\n"
"================================================================================\n"
"MSG: go2arm_gazebo/Vector3\n"
"# Vector3.msg\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: go2arm_gazebo/Orientation\n"
"# Orientation.msg\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
;
  }

  static const char* value(const ::go2arm_gazebo::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::go2arm_gazebo::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity);
      stream.next(m.pos);
      stream.next(m.ori);
      stream.next(m.L_finger_pos);
      stream.next(m.R_finger_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::go2arm_gazebo::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::go2arm_gazebo::Command_<ContainerAllocator>& v)
  {
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::go2arm_gazebo::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::go2arm_gazebo::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "ori: ";
    s << std::endl;
    Printer< ::go2arm_gazebo::Orientation_<ContainerAllocator> >::stream(s, indent + "  ", v.ori);
    s << indent << "L_finger_pos: ";
    Printer<double>::stream(s, indent + "  ", v.L_finger_pos);
    s << indent << "R_finger_pos: ";
    Printer<double>::stream(s, indent + "  ", v.R_finger_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GO2ARM_GAZEBO_MESSAGE_COMMAND_H
