# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_msgs/RobotState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robot_msgs.msg

class RobotState(genpy.Message):
  _md5sum = "c7d5f0c74618348347456ca207fda81e"
  _type = "robot_msgs/RobotState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """IMU imu
MotorState[32] motor_state
================================================================================
MSG: robot_msgs/IMU
float32[4] quaternion
float32[3] gyroscope
float32[3] accelerometer
================================================================================
MSG: robot_msgs/MotorState
float32 q            # motor current position (rad)
float32 dq           # motor current speed (rad/s)
float32 ddq          # motor current speed (rad/s)
float32 tau_est      # current estimated output torque (N*m)
float32 cur          # current estimated output cur (N*m)"""
  __slots__ = ['imu','motor_state']
  _slot_types = ['robot_msgs/IMU','robot_msgs/MotorState[32]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       imu,motor_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.imu is None:
        self.imu = robot_msgs.msg.IMU()
      if self.motor_state is None:
        self.motor_state = [robot_msgs.msg.MotorState() for _ in range(32)]
    else:
      self.imu = robot_msgs.msg.IMU()
      self.motor_state = [robot_msgs.msg.MotorState() for _ in range(32)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_4f().pack(*self.imu.quaternion))
      buff.write(_get_struct_3f().pack(*self.imu.gyroscope))
      buff.write(_get_struct_3f().pack(*self.imu.accelerometer))
      if len(self.motor_state) != 32:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (32, len(self.motor_state), 'self.motor_state')))
      for val1 in self.motor_state:
        _x = val1
        buff.write(_get_struct_5f().pack(_x.q, _x.dq, _x.ddq, _x.tau_est, _x.cur))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.imu is None:
        self.imu = robot_msgs.msg.IMU()
      if self.motor_state is None:
        self.motor_state = None
      end = 0
      start = end
      end += 16
      self.imu.quaternion = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 12
      self.imu.gyroscope = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.imu.accelerometer = _get_struct_3f().unpack(str[start:end])
      self.motor_state = []
      for i in range(0, 32):
        val1 = robot_msgs.msg.MotorState()
        _x = val1
        start = end
        end += 20
        (_x.q, _x.dq, _x.ddq, _x.tau_est, _x.cur,) = _get_struct_5f().unpack(str[start:end])
        self.motor_state.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.imu.quaternion.tostring())
      buff.write(self.imu.gyroscope.tostring())
      buff.write(self.imu.accelerometer.tostring())
      if len(self.motor_state) != 32:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (32, len(self.motor_state), 'self.motor_state')))
      for val1 in self.motor_state:
        _x = val1
        buff.write(_get_struct_5f().pack(_x.q, _x.dq, _x.ddq, _x.tau_est, _x.cur))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.imu is None:
        self.imu = robot_msgs.msg.IMU()
      if self.motor_state is None:
        self.motor_state = None
      end = 0
      start = end
      end += 16
      self.imu.quaternion = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 12
      self.imu.gyroscope = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.imu.accelerometer = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      self.motor_state = []
      for i in range(0, 32):
        val1 = robot_msgs.msg.MotorState()
        _x = val1
        start = end
        end += 20
        (_x.q, _x.dq, _x.ddq, _x.tau_est, _x.cur,) = _get_struct_5f().unpack(str[start:end])
        self.motor_state.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
