# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from go2arm_gazebo/Command.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import go2arm_gazebo.msg

class Command(genpy.Message):
  _md5sum = "7ab687a3009a5ba42ab64b770a245c5d"
  _type = "go2arm_gazebo/Command"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Command.msg
Vector3 velocity
Vector3 pos
Orientation ori
float64 L_finger_pos
float64 R_finger_pos
================================================================================
MSG: go2arm_gazebo/Vector3
# Vector3.msg
float32 x
float32 y
float32 z
================================================================================
MSG: go2arm_gazebo/Orientation
# Orientation.msg
float32 roll
float32 pitch
float32 yaw"""
  __slots__ = ['velocity','pos','ori','L_finger_pos','R_finger_pos']
  _slot_types = ['go2arm_gazebo/Vector3','go2arm_gazebo/Vector3','go2arm_gazebo/Orientation','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       velocity,pos,ori,L_finger_pos,R_finger_pos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Command, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.velocity is None:
        self.velocity = go2arm_gazebo.msg.Vector3()
      if self.pos is None:
        self.pos = go2arm_gazebo.msg.Vector3()
      if self.ori is None:
        self.ori = go2arm_gazebo.msg.Orientation()
      if self.L_finger_pos is None:
        self.L_finger_pos = 0.
      if self.R_finger_pos is None:
        self.R_finger_pos = 0.
    else:
      self.velocity = go2arm_gazebo.msg.Vector3()
      self.pos = go2arm_gazebo.msg.Vector3()
      self.ori = go2arm_gazebo.msg.Orientation()
      self.L_finger_pos = 0.
      self.R_finger_pos = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9f2d().pack(_x.velocity.x, _x.velocity.y, _x.velocity.z, _x.pos.x, _x.pos.y, _x.pos.z, _x.ori.roll, _x.ori.pitch, _x.ori.yaw, _x.L_finger_pos, _x.R_finger_pos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.velocity is None:
        self.velocity = go2arm_gazebo.msg.Vector3()
      if self.pos is None:
        self.pos = go2arm_gazebo.msg.Vector3()
      if self.ori is None:
        self.ori = go2arm_gazebo.msg.Orientation()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.velocity.x, _x.velocity.y, _x.velocity.z, _x.pos.x, _x.pos.y, _x.pos.z, _x.ori.roll, _x.ori.pitch, _x.ori.yaw, _x.L_finger_pos, _x.R_finger_pos,) = _get_struct_9f2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9f2d().pack(_x.velocity.x, _x.velocity.y, _x.velocity.z, _x.pos.x, _x.pos.y, _x.pos.z, _x.ori.roll, _x.ori.pitch, _x.ori.yaw, _x.L_finger_pos, _x.R_finger_pos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.velocity is None:
        self.velocity = go2arm_gazebo.msg.Vector3()
      if self.pos is None:
        self.pos = go2arm_gazebo.msg.Vector3()
      if self.ori is None:
        self.ori = go2arm_gazebo.msg.Orientation()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.velocity.x, _x.velocity.y, _x.velocity.z, _x.pos.x, _x.pos.y, _x.pos.z, _x.ori.roll, _x.ori.pitch, _x.ori.yaw, _x.L_finger_pos, _x.R_finger_pos,) = _get_struct_9f2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f2d = None
def _get_struct_9f2d():
    global _struct_9f2d
    if _struct_9f2d is None:
        _struct_9f2d = struct.Struct("<9f2d")
    return _struct_9f2d
